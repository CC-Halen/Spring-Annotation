Spring容器的refresh()[创建以及刷新]：
1、prepareRefresh(); 刷新的预处理
    1）initPropertySources(); 初始化一些属性设置；子类自定义个性化的属性设置方法
    2）getEnvironment().validateRequiredProperties(); 属性校验
    3）this.earlyApplicationEvents = new LinkedHashSet<>();保存容器中早期的一些事件

2、ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); 获取beanFactory
    1）refreshBeanFactory(); 刷新[创建]beanFactory
        创建一个默认beanFactory对象 this.beanFactory = new DefaultListableBeanFactory();
        设置id
    2）getBeanFactory(); 返回GenericApplicationContext创建的对象（上一步创建好的beanFactory对象）
    3）将创建的BeanFactory[DefaultListableBeanFactory]返回

3、prepareBeanFactory(beanFactory); BeanFactory 的预准备工作，进行一些设置
    1）设置BeanFactory的类加载器、支持表达式解析器 ...
    2）添加部分的 BeanPostProcessor[ApplicationContextAwareProcessor]
    3）设置忽略的自动装配的接口 EnvironmentAware EmbeddedValueResolverAware ResourceLoaderAware ...
    4）注册可以解析的自动装配；能在任何组件自动注入的： BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
    5）添加后置处理器 BeanPostProcessor(new ApplicationListenerDetector(this));
    6）添加编译时的AspectJ
    7）给BeanFactory注册一些能用组件：
        environment[ConfigurableEnvironment]
        systemProperties[Map<String, Object>]
        systemEnvironment[Map<String, Object>]

4、postProcessBeanFactory(beanFactory); BeanFactory准备工作完成后的后置处理工作
    1）子类通过重写方法在BeanFactory创建并与准备完成以后做进一步的设置

=============================================以上是BeanFactory的创建与预准备工作==============================================================

5、invokeBeanFactoryPostProcessors(beanFactory); 执行BeanFactoryPostProcessors的方法
    BeanFactoryPostProcessor：BeanFactory的后置处理器。在BeanFactory标准初始化之后执行
    两个接口 BeanFactoryPostProcessor 与 BeanDefinitionRegistryPostProcessor

    1）执行invokeBeanFactoryPostProcessors()
        先执行BeanDefinitionRegistryPostProcessor的方法
        1）获取所有的BeanDefinitionRegistryPostProcessor组件
        2）看优先级排序，先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor
            执行 postProcessor.postProcessBeanDefinitionRegistry(registry);
        3）看优先级排序，再执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor
            执行 postProcessor.postProcessBeanDefinitionRegistry(registry);
        4）最后执行没有实现任何优先级和顺序接口的BeanDefinitionRegistryPostProcessor

        再执行BeanFactoryPostProcessor的方法
        1）先获取所有的BeanFactoryPostProcessor组件
        2）看优先级排序，先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor
            执行 postProcessor.postProcessBeanFactory(registry);
        3）看优先级排序，再执行实现了Ordered顺序接口的BeanFactoryPostProcessor
            执行 postProcessor.postProcessBeanFactory(registry);
        4）最后执行没有实现任何优先级和顺序接口的BeanFactoryPostProcessor

6、registerBeanPostProcessors(beanFactory); 注册bean的后置处理器拦截bean的创建
    不同类型接口的BeanPostProcessor的执行时机是不一样的
    BeanPostProcessor
    DestructionAwareBeanPostProcessor
    InstantiationAwareBeanPostProcessor
    SmartInstantiationAwareBeanPostProcessor
    MergedBeanDefinitionPostProcessor（放在internalPostProcessors数组中）

    1）获取所有的BeanPostProcessor；后置处理器都有处理优先级，通过PriorityOrdered与Ordered
        beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);
    2）先注册PriorityOrdered优先级接口的BeanPostProcessor
        把每一个BeanPostProcessor添加到BeanFactory
        registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);
    3）再注册实现Ordered接口的
    4）最后注册没有实现任何优先级接口的BeanPostProcessor
    5）最终注册MergedBeanDefinitionPostProcessor
    6）注册一个 ApplicationListenerDetector 检查bean创建完成后是否是监听器，若是
        则this.applicationContext = applicationContext;

7、initMessageSource(); 初始化MessageSource组件（国际化功能、消息绑定、消息提醒）
    1）获取BeanFactory
    2）看容器中是否有id为messageSource的组件
        如果有，则赋值给messageSource属性
        如果没有，创建一个默认的DelegatingMessageSource
            MessageSource：取出国际化配置文件中的某个key的值，可按照区域获取
    3）把创建好的 MessageSource 注册在容器中，以后获取国际化配置文件的时候可以自动注入MessageSource
        beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);

8、initApplicationEventMulticaster(); 初始化事件派发器
    1）获取BeanFactory
    2）从BeanFactory中获取applicationEventMulticaster的组件[ApplicationEventMulticaster]
    3）若上一步没有配置，则自己创建SimpleApplicationEventMulticaster
        this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);
    4）将创建的ApplicationEventMulticaster添加到BeanFactory中

9、onRefresh(); 初始化子容器中的其他bean
    1）子类重写方法，在容器刷新的时候可以自定义逻辑

10、registerListeners(); 检查监听器bean并注册
    1）从容器中拿到所有的ApplicationListener组件
    2）将每个监听器添加到事件派发器中
        getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
    3）派发之前步骤产生的事件

11、finishBeanFactoryInitialization(beanFactory); 初始化所有的剩下的单实例bean
    1）beanFactory.preInstantiateSingletons(); 初始化剩下的单实例bean
        1）获取容器中的所有bean，依次进行初始化和创建对象
        2）获取bean的定义信息 RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);
        3）bean不是抽象的、是单实例的、是懒加载的
            1）判断是否是FactoryBean，是否实现了FactoryBean接口
            2）若不是FactoryBean，则使用getBean()方法
                1）getBean(beanName) ->
                2）doGetBean(name, null, null, false) ->
                3）getSingleton(beanName) ->
                    先获取缓存中的单实例bean，能取到就说明被创建过
                    从private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);获取
                4）缓存中获取不到，开始Bean的创建对象流程
                5）标记当前bean已经被创建 markBeanAsCreated(beanName);
                6）获取bean的定义信息
                7）获取当前bean依赖的其他bean  mbd.getDependsOn();
                    如果有就按照getBean()把依赖的bean先创建出来
                8）启动单实例bean的创建流程
                    1）createBean(beanName, mbd, args);
                    2）Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
                        让BeanPostProcessor先拦截返回代理对象
                        InstantiationAwareBeanPostProcessor提前执行：
                            先触发postProcessBeforeInstantiation()方法
                            若有返回值，再触发postProcessorsAfterInitialization()方法
                    3）如果InstantiationAwareBeanPostProcessor没有返回代理对象就执行下一步
                    4）Object beanInstance = doCreateBean(beanName, mbdToUse, args); 创建Bean
                        1）创建Bean实例，createBeanInstance(beanName, mbd, args);
                            利用工厂方法或对象的构造器创建出bean实例
                        2）applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
                            调用MergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition()方法
                        3）Bean属性赋值：populateBean(beanName, mbd, instanceWrapper);
                            赋值之前：
                            1）拿到InstantiationAwareBeanPostProcessor后置处理器
                                postProcessAfterInstantiation()方法
                            2）拿到InstantiationAwareBeanPostProcessor后置处理器
                                postProcessPropertyValues();
                            =================赋值====================================
                            3）应用属性的值；为属性使用setter方法赋值
                                applyPropertyValues()；
                        4）Bean初始化：initializeBean()
                            1）执行xxxAware接口的方法 invokeAwareMethods(beanName, bean);
                                BeanNameAware/BeanClassLoaderAware/BeanFactoryAware
                            2）执行后置处理器初始化之前 applyBeanPostProcessorsBeforeInitialization()
                            3）执行初始化方法 invokeInitMethods()
                                1）判断是否是InitializingBean接口的实现；执行接口规定的初始化
                                2）是否自定义初始化方法
                            4）执行后置处理器初始化之后 applyBeanPostProcessorsAfterInitialization()
                                BeanPostProcessor.postProcessAfterInitialization()
                        5）注册Bean的销毁方法 registerDisposableBeanIfNecessary()
                    5）将创建的Bean添加到缓存中 singletonObjects
                    ioc容器就是这些map，很多的map里保存了单实例bean，环境信息
        4）所有的Bean都利用getBean创建完成之后：
            检查所有的bean是否是SmartInitializingSingleton接口的，如果是就执行afterSingletonsInstantiated();

12、finishRefresh(); 完成BeanFactory的初始化创建工作，ioc容器创建完成
    1）initLifecycleProcessor(); 初始化和生命周期有关的处理器
        默认是从容器中找是否有LifecycleProcessor的组件，若没有则创建默认的声明周期组件new DefaultLifecycleProcessor();
        将组件加入到容器中
        写一个LifecycleProcessor的实现类，可以在BeanFactory刷新完成和关闭的时候调用
        onRefresh();
        onClose();
    2）拿到生命周期处理器，回调onRefresh();
        getLifecycleProcessor().onRefresh();
    3）发布容器刷新完成事件
        publishEvent(new ContextRefreshedEvent(this));
    4）LiveBeansView.registerApplicationContext(this);


=================================总结=============================================
1、Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息
    1）xml注册
    2）注解注册Bean：@Service @Component @Bean
2、Spring容器会在合适的时机创建这些bean
    1）调用这些bean的时候，利用getBean创建，创建好之后保存在容器中
    2）统一创建剩下的所有的bean；finishBeanFactoryInitialization()
3、后置处理器 BeanPostProcessor
    1）每个bean创建完成后，都会使用各种后置处理器进行处理来增强bean的功能
        AutowiredAnnotationBeanPostProcessor：处理自动注入
        AnnotationAwareAspectJAutoProxyCreator：AOP功能
        AsyncAnnotationBeanPostProcessor
        ...
4）事件驱动模型：
    ApplicationListener 事件监听
    ApplicationEventMulticaster 事件派发